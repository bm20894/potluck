{"version":3,"sources":["components/spinner.gif","components/AddItem.js","firebase.js","components/Items.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","AddItem","_ref","onSubmit","_useState","useState","name","currentItem","_useState2","Object","slicedToArray","item","setItem","onChange","e","objectSpread","defineProperty","target","value","handleSubmit","data","preventDefault","length","title","react_default","a","createElement","className","type","placeholder","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Item","removeItem","Fragment","onClick","id","Spinner","style","margin","align","src","spinner","width","alt","Items","_ref2","items","setItems","useEffect","database","ref","on","snapshot","val","newState","push","map","key","Items_Item","Items_Spinner","Boolean","window","location","hostname","match","ReactDOM","render","concat","remove","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd335d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.5e02af51.gif\";","import React, { useState } from 'react';\n\nexport default ({ onSubmit }) => {\n\tconst [item, setItem] = useState({ name: \"\", currentItem: \"\" });\n\n\tconst onChange = (e) => {\n\t\tsetItem({...item, [e.target.name]: e.target.value})\n\t}\n\n\tconst handleSubmit = (e, data) => {\n\t\te.preventDefault();\n\t\tif (data.name.length && data.currentItem.length) {\n\t\t\tonSubmit({ name: data.name, title: data.currentItem });\n\t\t\tsetItem({ name: \"\", currentItem: \"\"});\n\t\t}\n\t}\n\n\treturn (\n\t\t\t<section className=\"add-item\">\n\t\t\t\t<form onSubmit={e => handleSubmit(e, item)}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\tplaceholder=\"Enter your name\"\n\t\t\t\t\t\tvalue={item.name}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"currentItem\"\n\t\t\t\t\t\tplaceholder=\"What are you bringing?\"\n\t\t\t\t\t\tvalue={item.currentItem}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button>Add Item</button>\n\t\t\t\t</form>\n\t\t\t</section>\n\t)\n}\n","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar config = {\n\tapiKey: \"AIzaSyCyGe0wl_h0X34VGd4EzT3sxmwCvsBqYTU\",\n\tauthDomain: \"react-potluck-1734f.firebaseapp.com\",\n\tdatabaseURL: \"https://react-potluck-1734f.firebaseio.com\",\n\tprojectId: \"react-potluck-1734f\",\n\tstorageBucket: \"react-potluck-1734f.appspot.com\",\n\tmessagingSenderId: \"416519544849\",\n\tappId: \"1:416519544849:web:94fe43f716e5eec3\"\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport firebase from '../firebase.js';\nimport spinner from './spinner.gif';\n\nconst Item = ({ data, removeItem }) => (\n\t<React.Fragment>\n\t\t<h3>{data.title}</h3>\n\t\t<p>brought by: <strong>{data.name}</strong></p>\n\t\t<button onClick={() => removeItem(data.id)}>Remove Item</button>\n\t</React.Fragment>\n)\n\nconst Spinner = () => (\n\t<div style={{margin: \"auto\", align:\"center\"}}>\n\t\t<img\n\t\t\tsrc={spinner}\n\t\t\twidth=\"200px\"\n\t\t\talt=\"\"\n\t\t/>\n\t</div>\n)\n\nexport default ({ removeItem }) => {\n\tconst [items, setItems] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst itemsRef = firebase.database().ref(\"items\");\n\t\titemsRef.on(\"value\", (snapshot) => {\n\t\t\tlet items = snapshot.val();\n\t\t\tlet newState = [];\n\t\t\tfor(let item in items) {\n\t\t\t\tnewState.push({\n\t\t\t\t\tid: item,\n\t\t\t\t\ttitle: items[item].title,\n\t\t\t\t\tname: items[item].name\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetItems(newState);\n\t\t});\n\t}, [items]);\n\n\treturn (\n\t\t<ul>\n\t\t\t{items.length ? items.map(item => (\n\t\t\t\t<li key={item.id}>\n\t\t\t\t\t<Item data={item} removeItem={removeItem} />\n\t\t\t\t</li>\n\t\t\t)) : <Spinner />}\n\t\t</ul>\n\t)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport AddItem from './components/AddItem';\nimport Items from './components/Items';\nimport './App.css';\nimport firebase from './firebase.js';\n\nexport default () => {\n\n\tconst onSubmit = (item) => {\n\t\tconst itemsRef = firebase.database().ref(\"items\");\n\t\titemsRef.push(item);\n\t}\n\n\tconst removeItem = (id) => {\n\t\tconst itemRef = firebase.database().ref(`items/${id}`);\n\t\titemRef.remove();\n\t}\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<header>\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<h1>Potluck</h1>\n\t\t\t\t</div>\n\t\t\t</header>\n\n\t\t\t<div className=\"container\">\n\t\t\t\t<AddItem onSubmit={onSubmit} />\n\t\t\t\t<section className=\"display-item\">\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<Items removeItem={removeItem} />\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</div>\n\n\t\t</div>\n\t)\n}\n"],"sourceRoot":""}